# DEFAULT DICT

	from collections import defaultdict
	d = defaultdict(def_value)


# remove duplicates :

	list(dict.fromkeys(mylist))


# BINARY SEARCH
	def binary_search(array) -> int:
	    def condition(value) -> bool:
	        pass #condition

	    left, right = 0, len(array) # correct boundary
	    while left < right: 
	        mid = left + (right - left) // 2
	        if condition(mid):
	            right = mid
	        else:
	            left = mid + 1
	    return left # (left or left-1)

# BFS 
	from collections import deque
	  
	q = deque()
	visited = set()

	q.append(0)
	while q:
	    start = q.popleft()
	    if start in visited:
	        continue
	    for end in range(start + 1, len(s) + 1):
	        if condition(start):
	            q.append(end)
	            if end == len(s):
	                return True
	    visited.add(start)
	return False

# Queue :
	from queue import Queue
	q = Queue(maxsize = 3)
	put,get,empty


# BISECT :
	# Find the index of the smallest number >= x
	idx = bisect_left(sub, x)  

# CACHE LRU :
	from functools import lru_cache
	@lru_cache(None)


#Sort 






