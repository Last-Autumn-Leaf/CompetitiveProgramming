
SORT A VECTOR:

   sort( values.begin( ), values.end( ), [ ]( const auto& lhs, const auto& rhs )
   {
      return lhs.key < rhs.key;
   });


priority queue :
   auto comp = [&](const pair<string,int>& a, const pair<string,int>& b) {
               return a.second > b.second || (a.second == b.second && a.first < b.first);
           };
   priority_queue<pair<int, string>, vector<pair<int, string>>, decltype(comp)> q(comp);

   ----- by struct
   struct Compare {
    bool operator() (pair<int, string> a, pair<int, string> b) {
        if(a.first == b.first)
            return a.second > b.second;
        else
            return a.first < b.first;
    }
   };

   priority_queue<pair<int, string>, vector<pair<int, string>>, Compare> q;

QUEUE :
#include <queue>

  queue<string> languages;
  
  // check if the queue is empty  
  languages.empty()


  // push element into the queue
  languages.push("Python");
 
  //
  languages.front();

  //
  languages.pop();

  return 0;
}

# initialize a 2d vector :

    int m = 2, n = 5;

    vector<vector<int>> vec(m, vector<int> (n, 0));


# binary search 
    auto it = lower_bound(sub.begin(), sub.end(), x); // Find the index of the first element >= x
                    *it = x; // Replace that number with x